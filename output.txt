Mon Feb 13 08:02:43 UTC 2023
Linux LinuxMachine 5.15.49-linuxkit #1 SMP PREEMPT Tue Sep 13 07:51:32 UTC 2022 aarch64 aarch64 aarch64 GNU/Linux
uid=1000(cssuwbstudent) gid=1000(cssuwbstudent) groups=1000(cssuwbstudent),10(wheel)
=====================================================
1. Compilation warnings are in the section below
=====================================================
=====================================================
2. Program output are in the section below
=====================================================
*** Solving maze0.txt
Path: NNNNNESSSSENNNNESSSSENNNNESSSSENNNNN
XXXXXXXXXXXXXXXXXX*X
X           *******X
X           *******X
X           *******X
X           *******X
X           *******X
XXXXXXXXXXXX*XXXXXXX


*** Solving maze1.txt
Path: NNWWWWWNNNEEEEEESEESSSEEENNNNN
XXXXXXXXXXXXXXXXXX*X
X     X*******XXXX*X
X XXXXX*XXXXX***XX*X
X XXXXX*XXXXXXX*XX*X
X X    ******XX*XX*X
X XXXXXXXXXX*XX****X
XXXXXXXXXXXX*XXXXXXX


*** Solving maze2.txt
Path: NEEEEEENNNNN
XXXXXXXXXXXXXXXXXX*X
X     X++++++XXXXX*X
X XXXXX+XXXX+X++XX*X
X XXXXX+XXXX+XX+XX*X
X X++++++++X+XX+XX*X
X XXXXXXXXXX*******X
XXXXXXXXXXXX*XXXXXXX


*** Solving maze3.txt
Failed to solve: maze3.txt
XXXXXXXXXXXXXXXXXX X
X+++++X++++++XXXXX X
X+X+X+X+X++X+X++XX X
X+X+XXX+XXXX+XX+XX X
X+X++++++++X+XX+XX X
X+XXXXXXXXXX+++++X X
XXXXXXXXXXXX+XXXXXXX


*** Solving badfile.txt
Unable to open file: badfile.txt
Failed to load badfile.txt
Done!
=====================================================
3. clang-tidy warnings are in the section below
=====================================================
12840 warnings generated.
29148 warnings generated.
Suppressed 29148 warnings (29148 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.
Resource filename: /usr/local/lib64/python3.6/site-packages/clang_tidy/data/bin/clang-tidy 
=====================================================
4. clang-format warnings are in the section below
=====================================================
Running clang-format on ./main.cpp
Running clang-format on ./maze.cpp
=====================================================
5. Memory leak issues are in the section below
=====================================================
Unable to open file: badfile.txt
Failed to load badfile.txt
=====================================================
6. valgrind memory test is in the section below. Look for "definitely lost" 
=====================================================
Unable to open file: badfile.txt
Failed to load badfile.txt
==33564== Memcheck, a memory error detector
==33564== Copyright (C) 2002-2022, and GNU GPL'd, by Julian Seward et al.
==33564== Using Valgrind-3.19.0 and LibVEX; rerun with -h for copyright info
==33564== Command: ./a.out maze0.txt maze1.txt maze2.txt maze3.txt badfile.txt
==33564== Parent PID: 33445
==33564== 
==33564== 
==33564== HEAP SUMMARY:
==33564==     in use at exit: 0 bytes in 0 blocks
==33564==   total heap usage: 88 allocs, 88 frees, 115,944 bytes allocated
==33564== 
==33564== All heap blocks were freed -- no leaks are possible
==33564== 
==33564== For lists of detected and suppressed errors, rerun with: -s
==33564== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
=====================================================
7. Code coverage information is in the section below
=====================================================
Unable to open file: badfile.txt
Failed to load badfile.txt
File '/home/cssuwbstudent/caro1650/p3/2023win342d-p3-HoneyButterPotatoChips-master/main.cpp':
Name                                                                                           Regions    Miss   Cover     Lines    Miss   Cover  Branches    Miss   Cover
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
test(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)         7       0 100.00%        14       0 100.00%         4       0 100.00%
main                                                                                                 6       0 100.00%        10       0 100.00%         4       1  75.00%
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
TOTAL                                                                                               13       0 100.00%        24       0 100.00%         8       1  87.50%

File '/home/cssuwbstudent/caro1650/p3/2023win342d-p3-HoneyButterPotatoChips-master/maze.cpp':
Name                                                                                                                                                                                                                             Regions    Miss   Cover     Lines    Miss   Cover  Branches    Miss   Cover
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
operator<<(std::ostream&, Maze const&)                                                                                                                                                                                                 7       0 100.00%        10       0 100.00%         4       0 100.00%
Maze::Maze()                                                                                                                                                                                                                           1       0 100.00%         1       0 100.00%         0       0   0.00%
Maze::load(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)                                                                                                                                     7       0 100.00%        19       0 100.00%         4       0 100.00%
Maze::solve()                                                                                                                                                                                                                          1       0 100.00%         1       0 100.00%         0       0   0.00%
Maze::solve(int, int)                                                                                                                                                                                                                 36       0 100.00%        39       0 100.00%        26       3  88.46%
Maze::populatePath(int, int, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >&)        20       0 100.00%        16       0 100.00%        16       3  81.25%
Maze::getPath[abi:cxx11]() const                                                                                                                                                                                                       1       0 100.00%         1       0 100.00%         0       0   0.00%
Maze::atExit(int, int) const                                                                                                                                                                                                           3       0 100.00%         3       0 100.00%         4       1  75.00%
Maze::isInside(int, int) const                                                                                                                                                                                                         7       0 100.00%         3       0 100.00%         8       2  75.00%
Maze::isClear(int, int) const                                                                                                                                                                                                          1       0 100.00%         4       1  75.00%         0       0   0.00%
Maze::markAsPath(int, int)                                                                                                                                                                                                             1       0 100.00%         4       1  75.00%         0       0   0.00%
Maze::markAsVisited(int, int)                                                                                                                                                                                                          1       0 100.00%         4       1  75.00%         0       0   0.00%
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
TOTAL                                                                                                                                                                                                                                 86       0 100.00%       105       3  97.14%        62       9  85.48%
/home/cssuwbstudent/caro1650/p3/2023win342d-p3-HoneyButterPotatoChips-master/main.cpp:
    1|       |#include <iostream>
    2|       |
    3|       |#include "maze.h"
    4|       |
    5|       |using namespace std;
    6|       |
    7|      5|void test(const string &mazeFile) {
    8|      5|  Maze myMaze;
    9|      5|  cout << "*** Solving " << mazeFile << endl;
   10|      5|  if (!myMaze.load(mazeFile)) {
   11|      1|    cerr << "Failed to load " << mazeFile << endl;
   12|      1|    return;
   13|      1|  }
   14|      4|  if (myMaze.solve()) {
   15|      3|    cout << "Path: " << myMaze.getPath() << endl;
   16|      3|  } else {
   17|      1|    cout << "Failed to solve: " << mazeFile << endl;
   18|      1|  }
   19|      4|  cout << myMaze << endl;
   20|      4|}
   21|       |
   22|       |// accepts multiple maze files from command line
   23|       |// ./a.out maze0.txt maze1.txt maze2.txt maze3.txt badfile.txt
   24|      1|int main(int argc, char *argv[]) {
   25|      1|  if (argc >= 1) {
   26|      6|    for (int i = 1; i < argc; ++i) {
   27|      5|      string mazeFile = argv[i];
   28|      5|      test(mazeFile);
   29|      5|    }
   30|      1|  }
   31|      1|  cout << "Done!" << endl;
   32|      1|  return 0;
   33|      1|}

/home/cssuwbstudent/caro1650/p3/2023win342d-p3-HoneyButterPotatoChips-master/maze.cpp:
    1|       |//
    2|       |// Created by Yusuf Pisan on 4/18/18.
    3|       |//
    4|       |
    5|       |#include "maze.h"
    6|       |#include <algorithm>
    7|       |#include <cassert>
    8|       |#include <climits>
    9|       |#include <fstream>
   10|       |#include <iostream>
   11|       |#include <sstream>
   12|       |
   13|       |using namespace std;
   14|       |
   15|       |// print maze object
   16|      4|ostream &operator<<(ostream &out, const Maze &maze) {
   17|     32|  for (int row = 0; row < maze.height; ++row) {
   18|    588|    for (int col = 0; col < maze.width; ++col) {
   19|    560|      out << maze.field[row][col];
   20|    560|    }
   21|     28|    out << endl;
   22|     28|  }
   23|      4|  out << endl;
   24|      4|  return out;
   25|      4|}
   26|       |
   27|       |// default constructor
   28|      5|Maze::Maze() = default;
   29|       |
   30|       |// Load maze file from current directory
   31|      5|bool Maze::load(const string &fileName) {
   32|      5|  ifstream inFile;
   33|      5|  inFile.open(fileName);
   34|      5|  if (!inFile.is_open()) {
   35|      1|    cerr << "Unable to open file: " << fileName << endl;
   36|       |    // next line is just to satisfy clang-tidy
   37|       |    // otherwise it complains saying function can be const
   38|      1|    width = height = 0;
   39|      1|    return false;
   40|      1|  }
   41|      4|  inFile >> width >> height;
   42|      4|  inFile >> exitRow >> exitColumn;
   43|      4|  inFile >> startRow >> startColumn;
   44|       |  // ignore leftover charcaters up to newline
   45|      4|  inFile.ignore(INT_MAX, '\n');
   46|      4|  string line;
   47|     32|  for (int row = 0; row < height; ++row) {
   48|     28|    getline(inFile, line); // read line by line
   49|     28|    field.push_back(line); // push the whole into the vector
   50|     28|  }
   51|      4|  return true;
   52|      5|}
   53|       |
   54|       |// // true if maze can be solved
   55|      4|bool Maze::solve() { return solve(startRow, startColumn); }
   56|       |
   57|    147|bool Maze::solve(int row, int col) {
   58|    147|  markAsPath(row, col);
   59|    147|  if (atExit(row, col)) {          // solved
   60|      3|    vector<string> visited(field); // clone the field, keep track of visited
   61|      3|    populatePath(startRow, startColumn, visited);
   62|      3|    return true;
   63|      3|  }
   64|       |  // check neighbors
   65|    144|  bool ans = false;
   66|    144|  if (isInside(row - 1, col) && isClear(row - 1, col)) {
   67|     53|    ans = solve(row - 1, col);
   68|     53|    if (!ans) {
   69|       |      // markAsVisited(row - 1, col);
   70|     34|    } else {
   71|     34|      return true; // sol found
   72|     34|    }
   73|     53|  }
   74|    110|  if (isInside(row + 1, col) && isClear(row + 1, col)) { // south
   75|     28|    ans = solve(row + 1, col);
   76|     28|    if (!ans) {
   77|       |      // markAsVisited(row + 1, col);
   78|     16|    } else {
   79|     16|      return true;
   80|     16|    }
   81|     28|  }
   82|     94|  if (isInside(row, col + 1) && isClear(row, col + 1)) { // EAST
   83|     35|    ans = solve(row, col + 1);
   84|     35|    if (!ans) {
   85|       |      // markAsVisited(row, col + 1);
   86|     23|    } else {
   87|     23|      return true;
   88|     23|    }
   89|     35|  }
   90|     71|  if (isInside(row, col - 1) && isClear(row, col - 1)) { // WEST
   91|     27|    ans = solve(row, col - 1);
   92|     27|    if (!ans) {
   93|       |      // markAsVisited(row, col - 1);
   94|     22|    } else {
   95|      5|      return true;
   96|      5|    }
   97|     27|  }
   98|     66|  markAsVisited(row, col);
   99|     66|  return false;
  100|       |  //
  101|     71|}
  102|       |
  103|     81|void Maze::populatePath(int row, int col, vector<string> &visited) {
  104|     81|  visited[row][col] = 'V';
  105|     81|  if (isInside(row - 1, col) && visited[row - 1][col] == PATH) {
  106|     34|    path += static_cast<char>(NORTH);
  107|     34|    populatePath(row - 1, col, visited);
  108|     47|  } else if (isInside(row + 1, col) && visited[row + 1][col] == PATH) { // south
  109|     16|    path += static_cast<char>(SOUTH);
  110|     16|    populatePath(row + 1, col, visited);
  111|     31|  } else if (isInside(row, col - 1) && visited[row][col - 1] == PATH) { // WEST
  112|      5|    path += static_cast<char>(WEST);
  113|      5|    populatePath(row, col - 1, visited);
  114|     26|  } else if (isInside(row, col + 1) && visited[row][col + 1] == PATH) { // EAST
  115|     23|    path += static_cast<char>(EAST);
  116|     23|    populatePath(row, col + 1, visited);
  117|     23|  }
  118|     81|}
  119|       |
  120|       |// path to exit
  121|      3|string Maze::getPath() const { return path; }
  122|       |
  123|       |// true if row, column is the exit
  124|    147|bool Maze::atExit(int row, int column) const {
  125|    147|  return row == exitRow && column == exitColumn;
  126|    147|}
  127|       |
  128|       |// true if row, column is inside the maze
  129|    604|bool Maze::isInside(int row, int col) const {
  130|    604|  return row >= 0 && col >= 0 && row < field.size() && col < field[row].size();
  131|    604|}
  132|       |
  133|       |// true if row, column is clear to move
  134|    418|bool Maze::isClear(int row, int col) const {
  135|    418|  assert(row >= 0 && col >= 0 && row < field.size() && col < field[row].size());
  136|      0|  return field[row][col] == CLEAR;
  137|    418|}
  138|       |
  139|       |// mark location as part of the path to exit
  140|    147|void Maze::markAsPath(int row, int col) {
  141|    147|  assert(row >= 0 && col >= 0 && row < field.size() && col < field[row].size());
  142|      0|  field[row][col] = PATH;
  143|    147|}
  144|       |
  145|       |// mark location as visited, not part of the path to exit
  146|     66|void Maze::markAsVisited(int row, int col) {
  147|     66|  assert(row >= 0 && col >= 0 && row < field.size() && col < field[row].size());
  148|      0|  field[row][col] = VISITED;
  149|     66|}

Mon Feb 13 08:02:49 UTC 2023
=====================================================
To create an output.txt file with all the output from this script
Run the below command
      ./create-output.sh > output.txt 2>&1 
=====================================================
